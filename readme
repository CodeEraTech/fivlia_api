exports.adminProducts = async (req, res) => {
  try {
    const { page = 1, limit = 10, search = ""} = req.query;

    const activeCities = await CityData.find({ status: true }, 'city').lean();
    const activeCityNames = activeCities.map(c => c.city.trim().toLowerCase());

    const zoneDocs = await ZoneData.find({}, 'zones').lean();
    const activeZoneIds = [];
    zoneDocs.forEach(doc => {
      (doc.zones || []).forEach(zone => {
        if (zone.status && zone._id) activeZoneIds.push(zone._id.toString());
      });
    });

    const allProducts = await Products.find({productName: { $regex: search, $options: "i" }}).sort({ createdAt: -1 }).lean();

    // Filter products based on active cities/zones
    const filteredProducts = allProducts.filter(product => {
      if (!product.location || !Array.isArray(product.location)) return false;

      return product.location.some(loc => {
        const cityNames = Array.isArray(loc.city) ? loc.city : [loc.city];
        const isCityActive = cityNames.some(city =>
          activeCityNames.includes(city?.name?.trim().toLowerCase())
        );

        const zones = Array.isArray(loc.zone) ? loc.zone : (loc.zone ? [loc.zone] : []);
        const zoneMatch = zones.some(z => activeZoneIds.includes(z._id?.toString()));

        return isCityActive && zoneMatch;
      });
    });

    const pageNum = Number(page);
    const limitNum = Number(limit);
    const startIndex = (pageNum - 1) * limitNum;
    const endIndex = startIndex + limitNum;
    const paginatedProducts = filteredProducts.slice(startIndex, endIndex);

    // Map only required fields
    const mappedProducts = paginatedProducts.map((p, index) => ({
      productName: p.productName,
      productThumbnailUrl:p.productThumbnailUrl,
      sku: p.sku,
      location: p.location,
      variants: p.variants,
      category: p.category,
      status: p.status
    }));

    return res.status(200).json({
      message: "Products",
      Product: mappedProducts,
      count: mappedProducts.length,
      page: pageNum,
      limit: limitNum,
      totalPages: Math.ceil(filteredProducts.length / limitNum)
    });

  } catch (error) {
    console.error("‚ùå Error in adminProducts:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};