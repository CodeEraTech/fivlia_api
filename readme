exports.getCart = async (req, res) => {
  try {
    const { id } = req.user;

    const items = await Cart.find({ userId: id });
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ status: false, message: "User not found." });
    }

    const address = await Address.findOne({ userId: id, default: true });

    const normalize = (str) =>
      str?.toLowerCase().replace(/[^\w\s]/gi, "").split(/\s+/).filter(Boolean);

    let userCity, userZone;
    let usedFallback = false;

    if (address) {
      userCity = address.city?.toLowerCase();
      userZone = address.address?.toLowerCase();
    } else if (user.location?.city && user.location?.zone) {
      userCity = user.location.city?.toLowerCase();
      userZone = user.location.zone?.toLowerCase();
      usedFallback = true; // ✅ used location fallback
    } else {
      return res.status(200).json({
        status: false,
        message: "Please select a default address or set your location properly.",
        items,
      });
    }

    const userZoneKeywords = normalize(userZone);

    const cityZoneDoc = await ZoneData.findOne({
      city: { $regex: new RegExp(`^${userCity}$`, "i") },
    });

    if (!cityZoneDoc) {
      return res.status(200).json({
        status: false,
        message: "City not serviceable.",
        items,
      });
    }

    const matchedZone = cityZoneDoc.zones.find((z) => {
      const zoneKeywords = normalize(z.address);
      return userZoneKeywords.some((keyword) => zoneKeywords.includes(keyword));
    });

    if (!matchedZone) {
      return res.status(200).json({
        status: false,
        message: "Zone not serviceable.",
        items,
      });
    }

    const store = await Store.findOne({
      zone: { $elemMatch: { _id: matchedZone._id } },
    });

    if (!store) {
      return res.status(200).json({
        status: false,
        message: "No store found for your location.",
        items,
      });
    }

    const stockDoc = await stock.findOne({ storeId: store._id });

    let anyUnavailable = false;

    const updatedItems = items.map((cartItem) => {
      const stockItem = stockDoc?.stock?.find(
        (s) =>
          s.productId.toString() === cartItem.productId.toString() &&
          s.variantId.toString() === cartItem.varientId.toString()
      );

      const availableQty = stockItem ? stockItem.quantity : 0;

      const itemObj = {
        ...cartItem.toObject(),
        stock: availableQty,
      };

      if (availableQty < cartItem.quantity) {
        anyUnavailable = true;
      }

      return itemObj;
    });

    if (anyUnavailable) {
      return res.status(200).json({
        status: false,
        message: "Some items are out of stock or quantity is insufficient.",
        items: updatedItems,
        StoreID: store._id,
      });
    }

    // ✅ Here's your condition: Location worked, but no default address
    if (usedFallback) {
      return res.status(200).json({
        status: false,
        message: "Please select a default address to proceed with checkout.",
        items: updatedItems,
        StoreID: store._id,
      });
    }

    // ✅ All good, address exists
    return res.status(200).json({
      status: true,
      message: "Cart items are available.",
      items: updatedItems,
      StoreID: store._id,
    });

  } catch (error) {
    console.error("❌ Error in getCart:", error);
    return res.status(500).json({
      status: false,
      message: "An error occurred!",
      error: error.message,
    });
  }
};