const sendNotification = require('./path/to/sendNotification'); // adjust path
const Seller = require('./models/seller'); // Your seller model
const Products = require('./models/products'); // Your products model

exports.acceptDeclineRequest = async (req, res) => {
  try {
    const { approval, id, productId, isImage, isLocation, description } = req.body;

    if (productId) {
      let updateFields = {
        sellerProductStatus: approval,
        brandApprovelDescription: description || "",
      };

      if (approval === "approved") {
        updateFields.status = true;
      }

      const productApplication = await Products.findByIdAndUpdate(
        productId,
        updateFields,
        { new: true }
      );

      // Fetch seller to get their FCM token
      const sellerDoc = await Seller.findById(productApplication.sellerId);
      if (sellerDoc && sellerDoc.fcmToken) {
        await sendNotification(
          sellerDoc.fcmToken,
          `Product Application ${approval}`,
          `Your product application has been ${approval}.`
        );
      }

      return res.status(200).json({
        message: `Product application ${approval}`,
        productApplication,
      });
    }

    if (isLocation) {
      let updatedData;
      const sellerDoc = await Seller.findById(id);

      if (approval === "approved") {
        await Seller.findByIdAndUpdate(id, {
          $set: {
            city: sellerDoc.pendingAddressUpdate.city,
            zone: sellerDoc.pendingAddressUpdate.zone,
            location: sellerDoc.pendingAddressUpdate.location,
          },
        });

        updatedData = await Seller.findByIdAndUpdate(
          id,
          { $unset: { pendingAddressUpdate: "" } },
          { new: true }
        );

        if (sellerDoc?.fcmToken) {
          await sendNotification(
            sellerDoc.fcmToken,
            `Location Update Approved`,
            `Your location update request has been approved.`
          );
        }
      } else {
        updatedData = await Seller.findByIdAndUpdate(
          id,
          { "pendingAddressUpdate.status": "rejected" },
          { new: true }
        );

        if (sellerDoc?.fcmToken) {
          await sendNotification(
            sellerDoc.fcmToken,
            `Location Update Rejected`,
            `Your location update request has been rejected.`
          );
        }
      }

      return res.status(200).json({
        success: true,
        type: "location",
        message: `Location update ${approval}`,
        data: updatedData,
      });
    }

    if (isImage) {
      let updatedData;
      const sellerDoc = await Seller.findById(id);

      if (approval === "approved") {
        const pendingImages = sellerDoc.pendingAdvertisementImages?.image || [];

        await Seller.findByIdAndUpdate(id, {
          $set: {
            advertisementImages: pendingImages.filter(img => img && img !== ""),
          },
        });

        updatedData = await Seller.findByIdAndUpdate(
          id,
          { $unset: { pendingAdvertisementImages: "" } },
          { new: true }
        );

        if (sellerDoc?.fcmToken) {
          await sendNotification(
            sellerDoc.fcmToken,
            `Advertisement Images Approved`,
            `Your advertisement images update has been approved.`
          );
        }
      } else {
        updatedData = await Seller.findByIdAndUpdate(
          id,
          { "pendingAdvertisementImages.status": "rejected" },
          { new: true }
        );

        if (sellerDoc?.fcmToken) {
          await sendNotification(
            sellerDoc.fcmToken,
            `Advertisement Images Rejected`,
            `Your advertisement images update has been rejected.`
          );
        }
      }

      return res.status(200).json({
        success: true,
        type: "image",
        message: `Image update ${approval}`,
        data: updatedData,
      });
    }

    // Default seller approval
    const application = await Seller.findByIdAndUpdate(
      id,
      { approveStatus: approval },
      { new: true }
    );

    const sellerDoc = await Seller.findById(id);
    if (sellerDoc?.fcmToken) {
      await sendNotification(
        sellerDoc.fcmToken,
        `Seller Application ${approval}`,
        `Your seller application has been ${approval}.`
      );
    }

    return res.status(200).json({
      message: `Seller application ${approval}`,
      application,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "Server Error" });
  }
};
