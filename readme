exports.getAllSellerProducts = async (req, res) => {
  const { id } = req.query;

  try {
    // 1. Fetch Stock data for the seller using sellerId
    const stockData = await Stock.find({ storeId: id }).populate({
      path: "stock.productId",
      model: "Product",
    });

    const seller = await Store.findOne({ _id: id }).select(
      "storeName sellerCategories advertisementImages"
    );

    if (!stockData || stockData.length === 0) {
      return res
        .status(404)
        .json({ message: "No stock data found for this seller." });
    }

    // 2. Collect all product IDs from the stock data
    const productIds = stockData.flatMap((item) =>
      item.stock.map((stockItem) => stockItem.productId)
    );

    // 3. Fetch products corresponding to the productIds
    const products = await Products.find({ _id: { $in: productIds } }).populate(
      [
        { path: "category", select: "name" },
        { path: "brand_Name", select: "name" },
        { path: "unit", select: "name" },
      ]
    );

    // get and set all categories
    const categoryIds = seller.sellerCategories.map((c) => c.categoryId);
    const categories = await Category.find({
      _id: { $in: categoryIds },
    }).lean();
    return res
      .status(200)
      .json({sellerImage:seller.advertisementImages, seller: seller, categories: categories, products: products });
  } catch (error) {
    console.error("Error fetching seller products:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};
